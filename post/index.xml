<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mo白的博客</title>
    <link>https://yangj0605.github.io/post/</link>
    <description>Recent content in Posts on mo白的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Oct 2019 21:15:18 +0800</lastBuildDate>
    
	<atom:link href="https://yangj0605.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>按值传递</title>
      <link>https://yangj0605.github.io/post/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/</link>
      <pubDate>Sat, 12 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/</guid>
      <description>定义 在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数： ECMAScript中所有函数的参数都是按值传递的。 什么是按值传递</description>
    </item>
    
    <item>
      <title>闭包初识</title>
      <link>https://yangj0605.github.io/post/%E9%97%AD%E5%8C%85%E5%88%9D%E8%AF%86/</link>
      <pubDate>Sat, 12 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E9%97%AD%E5%8C%85%E5%88%9D%E8%AF%86/</guid>
      <description>定义 MDN 对闭包的定义为： 闭包是指那些能够访问自由变量的函数。 举个例子： 1 2 3 4 5 6 7 var a = 1; function foo() { console.log(a); } foo(); foo 函数可以访问变量 a，但是 a 既不是 foo 函</description>
    </item>
    
    <item>
      <title>变量对象</title>
      <link>https://yangj0605.github.io/post/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 12 Oct 2019 00:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid>
      <description>变量对象 变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。 全局上下文 1 2 3 4 5 var a = 1; console.log(window.a); this.window.b = 2; console.log(this.b); 全局上下文中的变</description>
    </item>
    
    <item>
      <title>执行上下文栈</title>
      <link>https://yangj0605.github.io/post/%E6%89%A7%E8%A1%8C%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</link>
      <pubDate>Fri, 11 Oct 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%89%A7%E8%A1%8C%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</guid>
      <description>变量提升 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var foo = function () { console.log(&amp;#39;foo1&amp;#39;); } foo(); // foo1 var foo = function () { console.log(&amp;#39;foo2&amp;#39;); } foo(); // foo2 函数声明提升 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function foo() { console.log(&amp;#39;foo1&amp;#39;); } foo(); // foo2</description>
    </item>
    
    <item>
      <title>作用域</title>
      <link>https://yangj0605.github.io/post/%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 10 Oct 2019 23:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>作用域了解 JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。 静态作用域与动态作用域 因为 JavaScript 采用的是词法作用域，函数的作用域在</description>
    </item>
    
    <item>
      <title>原型与原型链</title>
      <link>https://yangj0605.github.io/post/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Thu, 10 Oct 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>构造函数创建对象 1 2 3 4 5 6 7 8 9 10 function Person() { } var person = new Person(); console.log(person.__proto__ === Person.prototype) // true console.log(Person.prototype.constructor === Person) // true // 顺便学习一个ES5的方法,可以获得对象的原型 console.log(Object.getPrototypeOf(person) === Person.prototype) // true 原型链 1 2</description>
    </item>
    
    <item>
      <title>promise初使用</title>
      <link>https://yangj0605.github.io/post/promiseajax%E5%88%9D%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 04 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/promiseajax%E5%88%9D%E4%BD%BF%E7%94%A8/</guid>
      <description>Promise 1.了解Promise Promise 是一个异步操作返回的对象，用来传递异步操作的消息。 2.使用Promise 1 2 3 4 5 6 7 8 9 10 let promise = new Promise(function (resolve, reject) { res</description>
    </item>
    
    <item>
      <title>web性能优化</title>
      <link>https://yangj0605.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 30 Sep 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>常见的一些web性能优化套路 1.减少DNS查询 2.TCP连接复用（keep alive）、HTTP2.0 多复用 3.发起请求的时候减少cooki</description>
    </item>
    
    <item>
      <title>ES6常用知识记录</title>
      <link>https://yangj0605.github.io/post/es6%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 10 Sep 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</guid>
      <description>ES6常用的知识点记录 1.let与const ES6推荐使用let声明局部变量，相比之前的var（无论声明在何处，都会被视为声明在函数的最顶部</description>
    </item>
    
    <item>
      <title>JS知识点整理1</title>
      <link>https://yangj0605.github.io/post/js%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%861/</link>
      <pubDate>Sat, 07 Sep 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%861/</guid>
      <description>JavaScript知识点整理系列1 1.typeof和instance of 相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空， 或者</description>
    </item>
    
    <item>
      <title>CSS杂记3</title>
      <link>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B03/</link>
      <pubDate>Thu, 05 Sep 2019 20:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B03/</guid>
      <description>1.img中alt与title的区别 alt是图片不能正常显示时候出现的文本提示，title是鼠标西东道元素上的文本提示。 2.纯CSS画一个三</description>
    </item>
    
    <item>
      <title>flex与grid浅尝</title>
      <link>https://yangj0605.github.io/post/flex%E4%B8%8Egrid/</link>
      <pubDate>Fri, 30 Aug 2019 23:10:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/flex%E4%B8%8Egrid/</guid>
      <description>flex布局-弹性盒模型 相比传统的CSS布局，flex布局用惯了真是太爽了，什么水平垂直居中，真的不要太简单，下面就简单的记录一下学习fle</description>
    </item>
    
    <item>
      <title>js学习记录5</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</link>
      <pubDate>Wed, 28 Aug 2019 22:30:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</guid>
      <description>JS中的数据类型总共7种，Number，String，Boolean，Symbol，Null，Undefined，Object。 其中前面6种</description>
    </item>
    
    <item>
      <title>js学习记录4</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</link>
      <pubDate>Tue, 27 Aug 2019 21:08:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</guid>
      <description>prototype JS通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。 1 2 3 4 5 6 7 8 9 function Cat (name, color) { this.name =</description>
    </item>
    
    <item>
      <title>js学习记录3</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</link>
      <pubDate>Sun, 25 Aug 2019 23:01:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</guid>
      <description>函数 function 函数的声明 1.具名函数 1 2 3 4 function f(x,y){ return x+y } f.name // &amp;#39;f&amp;#39; 2.匿名函数 1 2 3 4 5 var f f = function(x,y){ return x+y } f.name // &amp;#39;f&amp;#39; 3.具名函数赋值 1 2 3 4 var f f = function f2(x,y){ return x+y } f.name</description>
    </item>
    
    <item>
      <title>js学习记录2</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</link>
      <pubDate>Thu, 22 Aug 2019 21:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</guid>
      <description>数组 Array 数组（array）就是一组有次序的值。每个值的位置都有编号（从0开始），整个数组用方括号表示。 创建数组 1 2 3 4 5 var arr = new Array(); // 创建一个数</description>
    </item>
    
    <item>
      <title>js学习记录1</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Tue, 20 Aug 2019 20:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid>
      <description>本文主要参考阮一峰的JavaScript 标准参考教程。 JavaScript入门 JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script lan</description>
    </item>
    
    <item>
      <title>CSS杂记2</title>
      <link>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B02/</link>
      <pubDate>Fri, 16 Aug 2019 19:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B02/</guid>
      <description>一些常用技巧 文字的水平居中：text-align:center; 容器的水平居中：如 1 2 3 4 div#box{ width:100px; marigin:0 auto; } 文字的垂直居中 单行文字的垂直居中，只要将</description>
    </item>
    
    <item>
      <title>CSS杂记1</title>
      <link>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B01/</link>
      <pubDate>Thu, 15 Aug 2019 17:40:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/css%E6%9D%82%E8%AE%B01/</guid>
      <description>引入CSS的几种方式 行内样式 通过style的属性来写CSS代码。 每一个HTML元素，都有 style、class、id、name、title 属</description>
    </item>
    
    <item>
      <title>使用hugo与github搭建博客</title>
      <link>https://yangj0605.github.io/post/%E4%BD%BF%E7%94%A8hugo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 14 Aug 2019 22:45:09 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E4%BD%BF%E7%94%A8hugo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>今天使用hugo来搭建博客，猜了很多的坑，特来写博客记录一下。 有关Hugo的介绍 它是go语言实现的一个博客生成器，世界上最快的博客生成器，之</description>
    </item>
    
    <item>
      <title>第二篇测试博客</title>
      <link>https://yangj0605.github.io/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 13 Aug 2019 17:40:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</guid>
      <description>测试主题 使用一个好用的主题~~~ 主题链接：https://github.com/xianmin/hugo-theme-jane/blob/m</description>
    </item>
    
    <item>
      <title>Hugo的第一篇博客哟</title>
      <link>https://yangj0605.github.io/post/hugo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E5%93%9F/</link>
      <pubDate>Tue, 13 Aug 2019 17:18:45 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/hugo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E5%93%9F/</guid>
      <description>Hello 开始用hugo写博客了哟</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yangj0605.github.io/post/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangj0605.github.io/post/test/</guid>
      <description>Documentbody {height: 100vh;}.parent {width: 300px;height: 200px;background: blue;overflow: hidden;}.son {width: 100px;height: 100px;background: pink;margin-top: 50px;}</description>
    </item>
    
  </channel>
</rss>