<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS深入 on mo白的博客</title>
    <link>https://yangj0605.github.io/categories/js%E6%B7%B1%E5%85%A5/</link>
    <description>Recent content in JS深入 on mo白的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Oct 2019 21:15:18 +0800</lastBuildDate>
    
	<atom:link href="https://yangj0605.github.io/categories/js%E6%B7%B1%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>按值传递</title>
      <link>https://yangj0605.github.io/post/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/</link>
      <pubDate>Sat, 12 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92/</guid>
      <description>定义 在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数： ECMAScript中所有函数的参数都是按值传递的。 什么是按值传递</description>
    </item>
    
    <item>
      <title>闭包初识</title>
      <link>https://yangj0605.github.io/post/%E9%97%AD%E5%8C%85%E5%88%9D%E8%AF%86/</link>
      <pubDate>Sat, 12 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E9%97%AD%E5%8C%85%E5%88%9D%E8%AF%86/</guid>
      <description>定义 MDN 对闭包的定义为： 闭包是指那些能够访问自由变量的函数。 举个例子： 1 2 3 4 5 6 7 var a = 1; function foo() { console.log(a); } foo(); foo 函数可以访问变量 a，但是 a 既不是 foo 函</description>
    </item>
    
    <item>
      <title>变量对象</title>
      <link>https://yangj0605.github.io/post/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 12 Oct 2019 00:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid>
      <description>变量对象 变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。 全局上下文 1 2 3 4 5 var a = 1; console.log(window.a); this.window.b = 2; console.log(this.b); 全局上下文中的变</description>
    </item>
    
    <item>
      <title>执行上下文栈</title>
      <link>https://yangj0605.github.io/post/%E6%89%A7%E8%A1%8C%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</link>
      <pubDate>Fri, 11 Oct 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%89%A7%E8%A1%8C%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</guid>
      <description>变量提升 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var foo = function () { console.log(&amp;#39;foo1&amp;#39;); } foo(); // foo1 var foo = function () { console.log(&amp;#39;foo2&amp;#39;); } foo(); // foo2 函数声明提升 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function foo() { console.log(&amp;#39;foo1&amp;#39;); } foo(); // foo2</description>
    </item>
    
    <item>
      <title>作用域</title>
      <link>https://yangj0605.github.io/post/%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 10 Oct 2019 23:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>作用域了解 JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。 静态作用域与动态作用域 因为 JavaScript 采用的是词法作用域，函数的作用域在</description>
    </item>
    
    <item>
      <title>原型与原型链</title>
      <link>https://yangj0605.github.io/post/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Thu, 10 Oct 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>构造函数创建对象 1 2 3 4 5 6 7 8 9 10 function Person() { } var person = new Person(); console.log(person.__proto__ === Person.prototype) // true console.log(Person.prototype.constructor === Person) // true // 顺便学习一个ES5的方法,可以获得对象的原型 console.log(Object.getPrototypeOf(person) === Person.prototype) // true 原型链 1 2</description>
    </item>
    
  </channel>
</rss>