<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>新知识 on mo白的博客</title>
    <link>https://yangj0605.github.io/categories/%E6%96%B0%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 新知识 on mo白的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 20 Nov 2019 22:21:18 +0800</lastBuildDate>
    
	<atom:link href="https://yangj0605.github.io/categories/%E6%96%B0%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event Loop的理解</title>
      <link>https://yangj0605.github.io/post/event-loop/</link>
      <pubDate>Wed, 20 Nov 2019 22:21:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/event-loop/</guid>
      <description>首先先了解以下几个概念： CPU 计算机的核心就是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。 进程 单个CPU一次只能运行一个任务。进</description>
    </item>
    
    <item>
      <title>SPA与vue的scoped原理</title>
      <link>https://yangj0605.github.io/post/spa%E5%8D%95%E9%A1%B5%E9%9D%A2%E4%B8%8Evue%E7%9A%84scoped/</link>
      <pubDate>Fri, 01 Nov 2019 21:21:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/spa%E5%8D%95%E9%A1%B5%E9%9D%A2%E4%B8%8Evue%E7%9A%84scoped/</guid>
      <description>SPA单页面 SPA仅在Web页面初始化时加载对应的html，js和css。一旦页面加载完毕，SPA不会因为用户的操作而进行重新加载或者跳转。</description>
    </item>
    
    <item>
      <title>js的设计模式</title>
      <link>https://yangj0605.github.io/post/js%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 21 Oct 2019 21:21:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>一开始都没听说过这个名词，后面看了几篇文章才算理解，写一篇记录以防忘记 一、观察者模式（Observer） 观察者模式指的是一个对象（Subje</description>
    </item>
    
    <item>
      <title>ES6之class与继承</title>
      <link>https://yangj0605.github.io/post/es6%E4%B9%8Bclass%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 20 Oct 2019 22:11:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E4%B9%8Bclass%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>首先来看看JS中继承的两种写法 ES5 写法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function Human(name){ this.name = name } Human.prototype.run = function(){ console.log(&amp;#34;我叫&amp;#</description>
    </item>
    
    <item>
      <title>数组的一些方法</title>
      <link>https://yangj0605.github.io/post/%E6%95%B0%E7%BB%84%E7%9A%84foreachmapreduce/</link>
      <pubDate>Sat, 19 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%95%B0%E7%BB%84%E7%9A%84foreachmapreduce/</guid>
      <description>forEach() 方法对数组的每个元素执行一次提供的函数。 1 2 3 4 5 var array1 = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; array1.forEach(function(element) { console.log(element); }); 原理: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function forEach(array,x){ for(let i=0;i&amp;lt;array.length;i++){ x(array[i],i) } } //调用</description>
    </item>
    
    <item>
      <title>es6之set</title>
      <link>https://yangj0605.github.io/post/es6%E4%B9%8Bset/</link>
      <pubDate>Fri, 18 Oct 2019 22:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E4%B9%8Bset/</guid>
      <description>set是ES6中新增的类型，和数组类似，唯一不同在于该类型不会有重复的数据，一般常用来对数据进行去重操作。 一、声明 let set = new Set();即创建</description>
    </item>
    
    <item>
      <title>标签模板</title>
      <link>https://yangj0605.github.io/post/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Thu, 17 Oct 2019 23:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</guid>
      <description>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的是函数，紧跟在后面的模板字符串就是它的参数。 1 2 3 4 5 6 7 8 var a =5 var b=10 xx `Hello ${a+b} world</description>
    </item>
    
  </channel>
</rss>