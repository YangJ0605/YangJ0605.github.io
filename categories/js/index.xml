<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on mo白的博客</title>
    <link>https://yangj0605.github.io/categories/js/</link>
    <description>Recent content in JS on mo白的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Oct 2019 21:21:18 +0800</lastBuildDate>
    
	<atom:link href="https://yangj0605.github.io/categories/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>js的设计模式</title>
      <link>https://yangj0605.github.io/post/js%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 21 Oct 2019 21:21:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>一开始都没听说过这个名词，后面看了几篇文章才算理解，写一篇记录以防忘记 一、观察者模式（Observer） 观察者模式指的是一个对象（Subje</description>
    </item>
    
    <item>
      <title>ES6之class与继承</title>
      <link>https://yangj0605.github.io/post/es6%E4%B9%8Bclass%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 20 Oct 2019 22:11:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E4%B9%8Bclass%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>首先来看看JS中继承的两种写法 ES5 写法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function Human(name){ this.name = name } Human.prototype.run = function(){ console.log(&amp;#34;我叫&amp;#</description>
    </item>
    
    <item>
      <title>数组的一些方法</title>
      <link>https://yangj0605.github.io/post/%E6%95%B0%E7%BB%84%E7%9A%84foreachmapreduce/</link>
      <pubDate>Sat, 19 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%95%B0%E7%BB%84%E7%9A%84foreachmapreduce/</guid>
      <description>forEach() 方法对数组的每个元素执行一次提供的函数。 1 2 3 4 5 var array1 = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; array1.forEach(function(element) { console.log(element); }); 原理: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function forEach(array,x){ for(let i=0;i&amp;lt;array.length;i++){ x(array[i],i) } } //调用</description>
    </item>
    
    <item>
      <title>es6之set</title>
      <link>https://yangj0605.github.io/post/es6%E4%B9%8Bset/</link>
      <pubDate>Fri, 18 Oct 2019 22:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E4%B9%8Bset/</guid>
      <description>set是ES6中新增的类型，和数组类似，唯一不同在于该类型不会有重复的数据，一般常用来对数据进行去重操作。 一、声明 let set = new Set();即创建</description>
    </item>
    
    <item>
      <title>标签模板</title>
      <link>https://yangj0605.github.io/post/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Thu, 17 Oct 2019 23:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</guid>
      <description>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的是函数，紧跟在后面的模板字符串就是它的参数。 1 2 3 4 5 6 7 8 var a =5 var b=10 xx `Hello ${a+b} world</description>
    </item>
    
    <item>
      <title>JavaScript经典题目</title>
      <link>https://yangj0605.github.io/post/javascript%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Thu, 17 Oct 2019 21:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/javascript%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/</guid>
      <description>记录一些做错的题 1 2 3 4 5 6 7 8 9 10 const shape = { radius: 10, diameter() { return this.radius * 2; }, perimeter: () =&amp;gt; 2 * Math.PI * this.radius }; shape.diameter(); shape.perimeter(); A: 20 and 62.83185307179586 B: 20 and NaN C: 20 and 63 D: NaN and 63 请注意，diameter</description>
    </item>
    
    <item>
      <title>ES6常用知识记录</title>
      <link>https://yangj0605.github.io/post/es6%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 10 Sep 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/es6%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</guid>
      <description>ES6常用的知识点记录 1.let与const ES6推荐使用let声明局部变量，相比之前的var（无论声明在何处，都会被视为声明在函数的最顶部</description>
    </item>
    
    <item>
      <title>JS知识点整理1</title>
      <link>https://yangj0605.github.io/post/js%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%861/</link>
      <pubDate>Sat, 07 Sep 2019 20:15:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%861/</guid>
      <description>JavaScript知识点整理系列1 1.typeof和instance of 相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空， 或者</description>
    </item>
    
    <item>
      <title>js学习记录5</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</link>
      <pubDate>Wed, 28 Aug 2019 22:30:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%955/</guid>
      <description>JS中的数据类型总共7种，Number，String，Boolean，Symbol，Null，Undefined，Object。 其中前面6种</description>
    </item>
    
    <item>
      <title>js学习记录4</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</link>
      <pubDate>Tue, 27 Aug 2019 21:08:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%954/</guid>
      <description>prototype JS通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。 1 2 3 4 5 6 7 8 9 function Cat (name, color) { this.name =</description>
    </item>
    
    <item>
      <title>js学习记录3</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</link>
      <pubDate>Sun, 25 Aug 2019 23:01:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</guid>
      <description>函数 function 函数的声明 1.具名函数 1 2 3 4 function f(x,y){ return x+y } f.name // &amp;#39;f&amp;#39; 2.匿名函数 1 2 3 4 5 var f f = function(x,y){ return x+y } f.name // &amp;#39;f&amp;#39; 3.具名函数赋值 1 2 3 4 var f f = function f2(x,y){ return x+y } f.name</description>
    </item>
    
    <item>
      <title>js学习记录2</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</link>
      <pubDate>Thu, 22 Aug 2019 21:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</guid>
      <description>数组 Array 数组（array）就是一组有次序的值。每个值的位置都有编号（从0开始），整个数组用方括号表示。 创建数组 1 2 3 4 5 var arr = new Array(); // 创建一个数</description>
    </item>
    
    <item>
      <title>js学习记录1</title>
      <link>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Tue, 20 Aug 2019 20:20:18 +0800</pubDate>
      
      <guid>https://yangj0605.github.io/post/js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid>
      <description>本文主要参考阮一峰的JavaScript 标准参考教程。 JavaScript入门 JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script lan</description>
    </item>
    
  </channel>
</rss>